//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Franka
{
    [Serializable]
    public class FrankaRobotStateMsg : Message
    {
        public const string k_RosMessageName = "franka_msgs/FrankaRobotState";
        public override string RosMessageName => k_RosMessageName;

        // ## Default parts of the message
        public Std.HeaderMsg header;
        // ## Indicates which dimensions have an active contact/collision flag raised
        public CollisionIndicatorsMsg collision_indicators;
        // ## The state of the arm in joint space
        //  The joint state consisting out of position (q), velocity (dq) and effort (tau_J)
        public Sensor.JointStateMsg measured_joint_state;
        //  The desired joint state consisting out of position (q_d), velocity (dq_d) and effort (tau_J_d)
        public Sensor.JointStateMsg desired_joint_state;
        //  The measured motor state of the joints consisting out of position (theta) and velocity (dtheta)
        public Sensor.JointStateMsg measured_joint_motor_state;
        //  The desired joint acceleration
        public double[] ddq_d;
        //  The derivative of the measured torque signal
        public double[] dtau_j;
        //  Filtered external torque. The JointState consists out of effort (tau_ext_hat_filtered)
        public Sensor.JointStateMsg tau_ext_hat_filtered;
        // ## The state of the elbow
        public ElbowMsg elbow;
        // ## The active wrenches acting on the stiffness frame expressed relative to
        //  stiffness frame
        public Geometry.WrenchStampedMsg k_f_ext_hat_k;
        //  base frame
        public Geometry.WrenchStampedMsg o_f_ext_hat_k;
        // ## The different inertias of the arm
        //  The end-effector inertia
        public Geometry.InertiaStampedMsg inertia_ee;
        //  The load inertia
        public Geometry.InertiaStampedMsg inertia_load;
        //  The total (end-effector + load) inertia
        public Geometry.InertiaStampedMsg inertia_total;
        // ## The poses describing the transformations between different frames of the arm
        //  Measured end-effector pose in base frame
        public Geometry.PoseStampedMsg o_t_ee;
        //  Last desired end-effector pose of motion generation in base frame
        public Geometry.PoseStampedMsg o_t_ee_d;
        //  Last commanded end-effector pose of motion generation in base frame
        public Geometry.PoseStampedMsg o_t_ee_c;
        //  Flange to end-effector frame
        public Geometry.PoseStampedMsg f_t_ee;
        //  End-effector to stiffness frame
        public Geometry.PoseStampedMsg ee_t_k;
        //  Desired end effector twist in base frame
        public Geometry.TwistStampedMsg o_dp_ee_d;
        //  Last commanded end effector twist in base frame
        public Geometry.TwistStampedMsg o_dp_ee_c;
        //  Last commanded end effector acceleration in base frame
        public Geometry.AccelStampedMsg o_ddp_ee_c;
        // ## Additional information
        public double time;
        public double control_command_success_rate;
        public const byte ROBOT_MODE_OTHER = 0;
        public const byte ROBOT_MODE_IDLE = 1;
        public const byte ROBOT_MODE_MOVE = 2;
        public const byte ROBOT_MODE_GUIDING = 3;
        public const byte ROBOT_MODE_REFLEX = 4;
        public const byte ROBOT_MODE_USER_STOPPED = 5;
        public const byte ROBOT_MODE_AUTOMATIC_ERROR_RECOVERY = 6;
        public byte robot_mode;
        public ErrorsMsg current_errors;
        public ErrorsMsg last_motion_errors;

        public FrankaRobotStateMsg()
        {
            this.header = new Std.HeaderMsg();
            this.collision_indicators = new CollisionIndicatorsMsg();
            this.measured_joint_state = new Sensor.JointStateMsg();
            this.desired_joint_state = new Sensor.JointStateMsg();
            this.measured_joint_motor_state = new Sensor.JointStateMsg();
            this.ddq_d = new double[7];
            this.dtau_j = new double[7];
            this.tau_ext_hat_filtered = new Sensor.JointStateMsg();
            this.elbow = new ElbowMsg();
            this.k_f_ext_hat_k = new Geometry.WrenchStampedMsg();
            this.o_f_ext_hat_k = new Geometry.WrenchStampedMsg();
            this.inertia_ee = new Geometry.InertiaStampedMsg();
            this.inertia_load = new Geometry.InertiaStampedMsg();
            this.inertia_total = new Geometry.InertiaStampedMsg();
            this.o_t_ee = new Geometry.PoseStampedMsg();
            this.o_t_ee_d = new Geometry.PoseStampedMsg();
            this.o_t_ee_c = new Geometry.PoseStampedMsg();
            this.f_t_ee = new Geometry.PoseStampedMsg();
            this.ee_t_k = new Geometry.PoseStampedMsg();
            this.o_dp_ee_d = new Geometry.TwistStampedMsg();
            this.o_dp_ee_c = new Geometry.TwistStampedMsg();
            this.o_ddp_ee_c = new Geometry.AccelStampedMsg();
            this.time = 0.0;
            this.control_command_success_rate = 0.0;
            this.robot_mode = 0;
            this.current_errors = new ErrorsMsg();
            this.last_motion_errors = new ErrorsMsg();
        }

        public FrankaRobotStateMsg(Std.HeaderMsg header, CollisionIndicatorsMsg collision_indicators, Sensor.JointStateMsg measured_joint_state, Sensor.JointStateMsg desired_joint_state, Sensor.JointStateMsg measured_joint_motor_state, double[] ddq_d, double[] dtau_j, Sensor.JointStateMsg tau_ext_hat_filtered, ElbowMsg elbow, Geometry.WrenchStampedMsg k_f_ext_hat_k, Geometry.WrenchStampedMsg o_f_ext_hat_k, Geometry.InertiaStampedMsg inertia_ee, Geometry.InertiaStampedMsg inertia_load, Geometry.InertiaStampedMsg inertia_total, Geometry.PoseStampedMsg o_t_ee, Geometry.PoseStampedMsg o_t_ee_d, Geometry.PoseStampedMsg o_t_ee_c, Geometry.PoseStampedMsg f_t_ee, Geometry.PoseStampedMsg ee_t_k, Geometry.TwistStampedMsg o_dp_ee_d, Geometry.TwistStampedMsg o_dp_ee_c, Geometry.AccelStampedMsg o_ddp_ee_c, double time, double control_command_success_rate, byte robot_mode, ErrorsMsg current_errors, ErrorsMsg last_motion_errors)
        {
            this.header = header;
            this.collision_indicators = collision_indicators;
            this.measured_joint_state = measured_joint_state;
            this.desired_joint_state = desired_joint_state;
            this.measured_joint_motor_state = measured_joint_motor_state;
            this.ddq_d = ddq_d;
            this.dtau_j = dtau_j;
            this.tau_ext_hat_filtered = tau_ext_hat_filtered;
            this.elbow = elbow;
            this.k_f_ext_hat_k = k_f_ext_hat_k;
            this.o_f_ext_hat_k = o_f_ext_hat_k;
            this.inertia_ee = inertia_ee;
            this.inertia_load = inertia_load;
            this.inertia_total = inertia_total;
            this.o_t_ee = o_t_ee;
            this.o_t_ee_d = o_t_ee_d;
            this.o_t_ee_c = o_t_ee_c;
            this.f_t_ee = f_t_ee;
            this.ee_t_k = ee_t_k;
            this.o_dp_ee_d = o_dp_ee_d;
            this.o_dp_ee_c = o_dp_ee_c;
            this.o_ddp_ee_c = o_ddp_ee_c;
            this.time = time;
            this.control_command_success_rate = control_command_success_rate;
            this.robot_mode = robot_mode;
            this.current_errors = current_errors;
            this.last_motion_errors = last_motion_errors;
        }

        public static FrankaRobotStateMsg Deserialize(MessageDeserializer deserializer) => new FrankaRobotStateMsg(deserializer);

        private FrankaRobotStateMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            this.collision_indicators = CollisionIndicatorsMsg.Deserialize(deserializer);
            this.measured_joint_state = Sensor.JointStateMsg.Deserialize(deserializer);
            this.desired_joint_state = Sensor.JointStateMsg.Deserialize(deserializer);
            this.measured_joint_motor_state = Sensor.JointStateMsg.Deserialize(deserializer);
            deserializer.Read(out this.ddq_d, sizeof(double), 7);
            deserializer.Read(out this.dtau_j, sizeof(double), 7);
            this.tau_ext_hat_filtered = Sensor.JointStateMsg.Deserialize(deserializer);
            this.elbow = ElbowMsg.Deserialize(deserializer);
            this.k_f_ext_hat_k = Geometry.WrenchStampedMsg.Deserialize(deserializer);
            this.o_f_ext_hat_k = Geometry.WrenchStampedMsg.Deserialize(deserializer);
            this.inertia_ee = Geometry.InertiaStampedMsg.Deserialize(deserializer);
            this.inertia_load = Geometry.InertiaStampedMsg.Deserialize(deserializer);
            this.inertia_total = Geometry.InertiaStampedMsg.Deserialize(deserializer);
            this.o_t_ee = Geometry.PoseStampedMsg.Deserialize(deserializer);
            this.o_t_ee_d = Geometry.PoseStampedMsg.Deserialize(deserializer);
            this.o_t_ee_c = Geometry.PoseStampedMsg.Deserialize(deserializer);
            this.f_t_ee = Geometry.PoseStampedMsg.Deserialize(deserializer);
            this.ee_t_k = Geometry.PoseStampedMsg.Deserialize(deserializer);
            this.o_dp_ee_d = Geometry.TwistStampedMsg.Deserialize(deserializer);
            this.o_dp_ee_c = Geometry.TwistStampedMsg.Deserialize(deserializer);
            this.o_ddp_ee_c = Geometry.AccelStampedMsg.Deserialize(deserializer);
            deserializer.Read(out this.time);
            deserializer.Read(out this.control_command_success_rate);
            deserializer.Read(out this.robot_mode);
            this.current_errors = ErrorsMsg.Deserialize(deserializer);
            this.last_motion_errors = ErrorsMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.collision_indicators);
            serializer.Write(this.measured_joint_state);
            serializer.Write(this.desired_joint_state);
            serializer.Write(this.measured_joint_motor_state);
            serializer.Write(this.ddq_d);
            serializer.Write(this.dtau_j);
            serializer.Write(this.tau_ext_hat_filtered);
            serializer.Write(this.elbow);
            serializer.Write(this.k_f_ext_hat_k);
            serializer.Write(this.o_f_ext_hat_k);
            serializer.Write(this.inertia_ee);
            serializer.Write(this.inertia_load);
            serializer.Write(this.inertia_total);
            serializer.Write(this.o_t_ee);
            serializer.Write(this.o_t_ee_d);
            serializer.Write(this.o_t_ee_c);
            serializer.Write(this.f_t_ee);
            serializer.Write(this.ee_t_k);
            serializer.Write(this.o_dp_ee_d);
            serializer.Write(this.o_dp_ee_c);
            serializer.Write(this.o_ddp_ee_c);
            serializer.Write(this.time);
            serializer.Write(this.control_command_success_rate);
            serializer.Write(this.robot_mode);
            serializer.Write(this.current_errors);
            serializer.Write(this.last_motion_errors);
        }

        public override string ToString()
        {
            return "FrankaRobotStateMsg: " +
            "\nheader: " + header.ToString() +
            "\ncollision_indicators: " + collision_indicators.ToString() +
            "\nmeasured_joint_state: " + measured_joint_state.ToString() +
            "\ndesired_joint_state: " + desired_joint_state.ToString() +
            "\nmeasured_joint_motor_state: " + measured_joint_motor_state.ToString() +
            "\nddq_d: " + System.String.Join(", ", ddq_d.ToList()) +
            "\ndtau_j: " + System.String.Join(", ", dtau_j.ToList()) +
            "\ntau_ext_hat_filtered: " + tau_ext_hat_filtered.ToString() +
            "\nelbow: " + elbow.ToString() +
            "\nk_f_ext_hat_k: " + k_f_ext_hat_k.ToString() +
            "\no_f_ext_hat_k: " + o_f_ext_hat_k.ToString() +
            "\ninertia_ee: " + inertia_ee.ToString() +
            "\ninertia_load: " + inertia_load.ToString() +
            "\ninertia_total: " + inertia_total.ToString() +
            "\no_t_ee: " + o_t_ee.ToString() +
            "\no_t_ee_d: " + o_t_ee_d.ToString() +
            "\no_t_ee_c: " + o_t_ee_c.ToString() +
            "\nf_t_ee: " + f_t_ee.ToString() +
            "\nee_t_k: " + ee_t_k.ToString() +
            "\no_dp_ee_d: " + o_dp_ee_d.ToString() +
            "\no_dp_ee_c: " + o_dp_ee_c.ToString() +
            "\no_ddp_ee_c: " + o_ddp_ee_c.ToString() +
            "\ntime: " + time.ToString() +
            "\ncontrol_command_success_rate: " + control_command_success_rate.ToString() +
            "\nrobot_mode: " + robot_mode.ToString() +
            "\ncurrent_errors: " + current_errors.ToString() +
            "\nlast_motion_errors: " + last_motion_errors.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
