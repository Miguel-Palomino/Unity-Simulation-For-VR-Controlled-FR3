//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Franka
{
    [Serializable]
    public class CollisionIndicatorsMsg : Message
    {
        public const string k_RosMessageName = "franka_msgs/CollisionIndicators";
        public override string RosMessageName => k_RosMessageName;

        // ## Indicates which dimensions have an active contact/collision flag raised
        public Geometry.Vector3Msg is_cartesian_linear_collision;
        public Geometry.Vector3Msg is_cartesian_angular_collision;
        public Geometry.Vector3Msg is_cartesian_linear_contact;
        public Geometry.Vector3Msg is_cartesian_angular_contact;
        public double[] is_joint_collision;
        public double[] is_joint_contact;

        public CollisionIndicatorsMsg()
        {
            this.is_cartesian_linear_collision = new Geometry.Vector3Msg();
            this.is_cartesian_angular_collision = new Geometry.Vector3Msg();
            this.is_cartesian_linear_contact = new Geometry.Vector3Msg();
            this.is_cartesian_angular_contact = new Geometry.Vector3Msg();
            this.is_joint_collision = new double[7];
            this.is_joint_contact = new double[7];
        }

        public CollisionIndicatorsMsg(Geometry.Vector3Msg is_cartesian_linear_collision, Geometry.Vector3Msg is_cartesian_angular_collision, Geometry.Vector3Msg is_cartesian_linear_contact, Geometry.Vector3Msg is_cartesian_angular_contact, double[] is_joint_collision, double[] is_joint_contact)
        {
            this.is_cartesian_linear_collision = is_cartesian_linear_collision;
            this.is_cartesian_angular_collision = is_cartesian_angular_collision;
            this.is_cartesian_linear_contact = is_cartesian_linear_contact;
            this.is_cartesian_angular_contact = is_cartesian_angular_contact;
            this.is_joint_collision = is_joint_collision;
            this.is_joint_contact = is_joint_contact;
        }

        public static CollisionIndicatorsMsg Deserialize(MessageDeserializer deserializer) => new CollisionIndicatorsMsg(deserializer);

        private CollisionIndicatorsMsg(MessageDeserializer deserializer)
        {
            this.is_cartesian_linear_collision = Geometry.Vector3Msg.Deserialize(deserializer);
            this.is_cartesian_angular_collision = Geometry.Vector3Msg.Deserialize(deserializer);
            this.is_cartesian_linear_contact = Geometry.Vector3Msg.Deserialize(deserializer);
            this.is_cartesian_angular_contact = Geometry.Vector3Msg.Deserialize(deserializer);
            deserializer.Read(out this.is_joint_collision, sizeof(double), 7);
            deserializer.Read(out this.is_joint_contact, sizeof(double), 7);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.is_cartesian_linear_collision);
            serializer.Write(this.is_cartesian_angular_collision);
            serializer.Write(this.is_cartesian_linear_contact);
            serializer.Write(this.is_cartesian_angular_contact);
            serializer.Write(this.is_joint_collision);
            serializer.Write(this.is_joint_contact);
        }

        public override string ToString()
        {
            return "CollisionIndicatorsMsg: " +
            "\nis_cartesian_linear_collision: " + is_cartesian_linear_collision.ToString() +
            "\nis_cartesian_angular_collision: " + is_cartesian_angular_collision.ToString() +
            "\nis_cartesian_linear_contact: " + is_cartesian_linear_contact.ToString() +
            "\nis_cartesian_angular_contact: " + is_cartesian_angular_contact.ToString() +
            "\nis_joint_collision: " + System.String.Join(", ", is_joint_collision.ToList()) +
            "\nis_joint_contact: " + System.String.Join(", ", is_joint_contact.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
